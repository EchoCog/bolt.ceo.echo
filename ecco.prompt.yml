messages:
  - role: system
    content: >-
      To improve the `prompts.ts` file in the `EchoCog/bolt.ceo.echo`
      repository, consider the following pathways, structured as a cognitive
      flowchart with recursive implementation:


      ---


      ### **Step 1: Modularization and Code Structure Enhancement**


      #### **Pathway: Adaptive Decomposition**

      - **Current Observation**: The file contains dense blocks of text defining
      prompts and configurations.

      - **Improvement Strategy**:
        - **Break large blocks**: Split the prompts into separate modules or files based on their purpose (e.g., `systemConstraints.ts`, `characterTraits.ts`).
        - **Recursive Refactoring**: Implement utility functions to dynamically compose prompts based on runtime conditions (e.g., environment constraints or user preferences).

      ---


      ### **Step 2: Optimization for Scalability**


      #### **Pathway: Cognitive Synergy**

      - **Current Observation**: The file hardcodes configurations such as
      `allowedHTMLElements` or constraints.

      - **Improvement Strategy**:
        - **Hypergraph Encoding**: Replace static configurations with an extensible cognitive graph structure for interdependencies (e.g., use JSON Schema or TypeScript interfaces).
        - **Emergent Patterns**: Enable runtime adaptability by defining traits and constraints in a centralized repository-wide configuration file.

      ---


      ### **Step 3: Enhance Readability and Maintainability**


      #### **Pathway: Symbolic Simplification**

      - **Current Observation**: Code formatting and inline comments could be
      improved for clarity.

      - **Improvement Strategy**:
        - **Code Formatting**: Ensure consistent spacing (e.g., 2 spaces for indentation as mentioned in `<code_formatting_info>`).
        - **Commentary Precision**: Infuse "philosophical insights" and "subtle humor" in comments to maintain engagement and clarity.

      ---


      ### **Step 4: Integration with Larger Repository Context**


      #### **Pathway: Recursive Alignment**

      - **Current Observation**: The file defines `getSystemPrompt` and
      `CONTINUE_PROMPT`, which are referenced across multiple parts of the
      repository.

      - **Improvement Strategy**:
        - **Centralized Prompt Library**: Move all prompt-related functions to a `PromptLibrary` class, ensuring reusability and reducing redundancy.
        - **Cross-File Analysis**: Ensure alignment with `optimized.ts` and `new-prompt.ts` files which define similar constructs.

      ---


      ### **Step 5: Implementation of Experimental Features**


      #### **Pathway: Neural-Symbolic Fusion**

      - **Current Observation**: Experimental extensions like `ReservoirPy` and
      `AtomSpace` are mentioned but not directly utilized.

      - **Improvement Strategy**:
        - **Integrate Experimental Tools**: Create a new prompt that leverages these tools for hypergraph-based knowledge representation.
        - **Dynamic Features**: Add runtime checks for experimental extensions availability and adapt prompts accordingly.

      ---


      ### **Step 6: Performance Testing and Validation**


      #### **Pathway: Emergent Feedback Loops**

      - **Current Observation**: No explicit validation mechanism for prompt
      outputs is defined.

      - **Improvement Strategy**:
        - **Unit Tests**: Implement tests to validate prompt generation logic under different configurations.
        - **Feedback Integration**: Collect user feedback on generated prompts and continuously refine them.
  - role: user
    content: >-
      Would you like to proceed with any of these pathways or explore specific
      aspects of {{input}}
model: openai/gpt-4o
